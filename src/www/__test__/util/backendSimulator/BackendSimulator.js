import { diff } from "jest-diff";
import { readFile } from "fs/promises";
import path from "path";
import { isEqual } from "underscore";
import {
  throwBackendSimulatorError,
  explainRequest,
} from "./throwBackendSimulatorError";
import { join } from "./join";

export class BackendSimulator {
  constructor(postId) {
    this.closed = false;
    this.postId = postId;
    this.filePath = getApiCallsPath(postId);
    this.nextApiCallIndex = 0;
    this.apiCalls = null;
    this.apiCallsPromise = readApiCallsFile(this.filePath)
      .then((i) => (this.apiCalls = i))
      .catch((f) => this.#throwLoadFailure(f));
  }

  async get(url) {
    return this.#fetch("GET", url, null);
  }

  async post(url, body) {
    return this.#fetch("POST", url, body);
  }

  async #fetch(method, url, body) {
    const actualRequest = { method, url, body };

    const apiCall = await this.#nextApiCall(actualRequest);
    const expectedRequest = apiCall.request;
    const response = apiCall.response;

    if (!isEqual(actualRequest, expectedRequest))
      this.#throwUnexpectedRequest(actualRequest, expectedRequest);

    return response.body;
  }

  async close() {
    this.closed = true;
    await this.apiCallsPromise;

    if (this.nextApiCallIndex < this.apiCalls.length)
      this.#throwSomeResponsesNotConsumed();
  }

  async #nextApiCall(actualRequest) {
    if (this.closed) this.#throwResponsesClosed(actualRequest);
    await this.apiCallsPromise;

    const responseIndex = this.nextApiCallIndex;
    this.nextApiCallIndex += 1;

    if (this.nextApiCallIndex > this.apiCalls.length)
      this.#throwTooManyBackendCalls(actualRequest);

    const apiCall = this.apiCalls[responseIndex];
    return apiCall;
  }

  #throwLoadFailure(error) {
    let message = [
      `Unkown error trying to load the apiCalls file for ${this.postId}.md. `,
      `The file was expected to be at ${this.filePath}.`,
    ];

    if (error.code === "ENOENT")
      message = [
        `The file that contains the frontend-backend apiCalls `,
        `for the tests of the post ${this.postId}.md `,
        `was not found. `,
        `The file was expected to be at ${this.filePath} `,
        `and it is created automatically by the backend tests. `,
        `Did you run the backend tests before the frontend tests?`,
      ];

    throw new Error(
      join(
        ...message,
        ``,
        `The original error failure is:`,
        `${error}`,
        ``,
        `Please, make sure that you had run the Backend tests `,
        `before the frontend tests. `,
        `The backend tests are the ones that creates the json files `,
        `for the backend frontend apiCall`,
      ),
    );
  }

  #throwResponsesClosed(actualRequest) {
    throwBackendSimulatorError(
      this,
      `The test has been finished but there are still some calls to the backend. `,
      `Please, check that you do not forget any await, or you do not have things like array.forEach(async () => ...), they should be await Promise.all(array.map(async () => ...)).`,
      `The frontend request is:`,
      explainRequest(actualRequest),
    );
  }

  #throwTooManyBackendCalls(actualRequest) {
    throwBackendSimulatorError(
      this,
      `There are more calls to the backend that the ones generated by the backend tests.`,
      `The current request is:`,
      explainRequest(actualRequest),
    );
  }

  #throwUnexpectedRequest(actualRequest, expectedRequest) {
    throwBackendSimulatorError(
      this,
      `The frontend has done a call to the backend that was not expected. It is not exactly like expected. `,
      `Make sure that the frontend does the same calls that the backend simulates. Correct the frontend, or the backend, as you deem necessary.`,
      `The frontend request is:`,
      explainRequest(actualRequest),
      `The expected request is:`,
      explainRequest(expectedRequest),
      `The changes are:`,
      `${diff(expectedRequest, actualRequest)}`,
    );
  }

  #throwSomeResponsesNotConsumed() {
    throwBackendSimulatorError(
      this,
      `The frontend has done less calls to the backend than the ones that the backend has simulated in its tests. `,
      `The frontend has done ${this.nextApiCallIndex} calls but the backend has simulated ${this.apiCalls.length}.`,
      `The apiCalls are:`,
      `- actual frontend apiCalls  : ${this.nextApiCallIndex}`,
      `- expected frontend apiCalls: ${this.apiCalls.length}`,
      `Please, add to the frontend the missing (${
        this.apiCalls.length - this.nextApiCallIndex
      }) backend api calls.`,
    );
  }
}

async function readApiCallsFile(path) {
  return readFile(path, { encoding: "utf8" }).then((c) => JSON.parse(c));
}

function getApiCallsPath(postId) {
  return path.join(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "..",
    "target",
    "classes",
    "apiCalls",
    `${postId}.json`,
  );
}
