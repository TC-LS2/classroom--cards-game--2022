import { diff } from "jest-diff";
import { readFile } from "fs/promises";
import path from "path";
import { isEqual } from "underscore";
import {
  throwBackendSimulatorError,
  explainRequest,
} from "./throwBackendSimulatorError";

export class BackendSimulator {
  constructor(postId) {
    this.closed = false;
    this.postId = postId;
    this.filePath = getInteractionsPath(postId);
    this.nextInteractionIndex = 0;
    this.interactions = null;
    this.interactionsPromise = readInteractionsFile(this.filePath);

    this.interactionsPromise.then((i) => (this.interactions = i));
  }

  async get(url) {
    const actualRequest = { method: "GET", url, body: null };

    const interaction = await this.#nextInteraction(actualRequest);
    const expectedRequest = interaction.request;
    const response = interaction.response;

    if (!isEqual(actualRequest, expectedRequest))
      this.#throwUnexpectedRequest(actualRequest, expectedRequest);

    return response.body;
  }

  async close() {
    this.closed = true;
    await this.interactionsPromise;

    if (this.nextInteractionIndex < this.interactions.length)
      this.#throwSomeResponsesNotConsumed();
  }

  async #nextInteraction(actualRequest) {
    if (this.closed) this.#throwResponsesClosed(actualRequest);
    await this.interactionsPromise;

    const responseIndex = this.nextInteractionIndex;
    this.nextInteractionIndex += 1;

    if (this.nextInteractionIndex > this.interactions.length)
      this.#throwTooManyBackendCalls(actualRequest);

    const interaction = this.interactions[responseIndex];
    return interaction;
  }

  #throwResponsesClosed(actualRequest) {
    throwBackendSimulatorError(
      this,
      `The test has been finished but there are still some calls to the backend. `,
      `Please, check that you do not forget any await, or you do not have things like array.forEach(async () => ...), they should be await Promise.all(array.map(async () => ...)).`,
      `The frontend request is:`,
      explainRequest(actualRequest)
    );
  }

  #throwTooManyBackendCalls(actualRequest) {
    throwBackendSimulatorError(
      this,
      `There are more calls to the backend that the ones generated by the backend tests.`,
      `The current request is:`,
      explainRequest(actualRequest)
    );
  }

  #throwUnexpectedRequest(actualRequest, expectedRequest) {
    throwBackendSimulatorError(
      this,
      `The frontend has done a call to the backend that was not expected. It is not exactly like expected. `,
      `Make sure that the frontend does the same calls that the backend simulates. Correct the frontend, or the backend, as you deem necessary.`,
      `The frontend request is:`,
      explainRequest(actualRequest),
      `The expected request is:`,
      explainRequest(expectedRequest),
      `The changes are:`,
      `${diff(expectedRequest, actualRequest)}`
    );
  }

  #throwSomeResponsesNotConsumed() {
    throwBackendSimulatorError(
      this,
      `The frontend has done less calls to the backend than the ones that the backend has simulated in its tests. `,
      `The frontend has done ${this.nextInteractionIndex} calls but the backend has simulated ${this.interactions.length}.`,
      `The interactions are:`,
      `- actual frontend interactions  : ${this.nextInteractionIndex}`,
      `- expected frontend interactions: ${this.interactions.length}`,
      `Please, make sure that the frontend does the required api calls to the backend.`
    );
  }
}

async function readInteractionsFile(path) {
  return readFile(path, { encoding: "utf8" }).then((c) => JSON.parse(c));
}

function getInteractionsPath(postId) {
  return path.join(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "..",
    "target",
    "classes",
    "frontendBackendInteractions",
    `${postId}.json`
  );
}
